// Place your key bindings in this file to override the defaults
[
    {
      "key": "ctrl+right",
      "command": "paredit.forwardSexp",
      "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
      "key": "alt+right",
      "command": "cursorWordRight"
    },
    {
      "key": "ctrl+left",
      "command": "paredit.backwardSexp",
      "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
      "key": "alt+left",
      "command": "cursorWordLeft"
    },
    {
      "key": "ctrl+alt+e ctrl+alt+j",
      "command": "workbench.action.joinTwoGroups"
    },
    {
      "key": "ctrl+j",
      "command": "editor.action.joinLines"
    },
    {
      "key": "ctrl+alt+a ctrl+alt+b",
      "command": "atlascode.views.bb.pullrequestsTreeView.focus"
    },
    {
      "key": "ctrl+alt+a ctrl+alt+j",
      "command": "atlascode.views.jira.customJql.focus"
    },
    {
      "key": "ctrl+t ctrl+f",
      "command": "workbench.action.terminal.focus"
    },
    {
      "key": "ctrl+t ctrl+t",
      "command": "workbench.action.quickOpenTerm"
    },
    {
      "key": "ctrl+u ctrl+u",
      "command": "editor.action.transformToUppercase"
    },
    {
      "key": "ctrl+l ctrl+l",
      "command": "editor.action.transformToLowercase"
    },
    {
      "key": "ctrl+alt+e ctrl+alt+right",
      "command": "workbench.action.moveEditorToRightGroup"
    },
    {
      "key": "ctrl+alt+k ctrl+alt+t",
      "command": "calva.toggleBetweenImplAndTest"
    },
    {
      "key": "ctrl+alt+space j",
      "command": "joyride.runUserScript",
      "args": "javadoc.cljs"
    },
    {
      "key": "ctrl+alt+space /",
      "command": "joyride.runUserScript",
      "args": "clojuredocs.cljs"
    },
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
	},
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},
	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "y",
		"command": "vspacecode.showMagitRefMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+j",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+k",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults"
    },
    {
        "key": "shift+escape",
        "command": "calva.clearInlineResults",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
    }
]